import datetime as dt
import logging
import random
import sqlite3
import threading
import time

import pytz
import telebot
from telebot import types

bot = telebot.TeleBot('')

user_states = {}
AWAITING_FACT = 'awaiting_fact'

conn = sqlite3.connect(r"")
cursor = conn.cursor()

cursor.execute("SELECT text FROM fact")
facts = cursor.fetchall()
conn.close()


# —Å—Ç–∞—Ä—Ç –∏ –∫–Ω–æ–ø–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
@bot.message_handler(commands=['start'])
def start_command(message):
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.chat.id)

        user_id = message.chat.id
        username = message.from_user.username
        moscow = pytz.timezone('Europe/Moscow')
        created_at = dt.datetime.now(moscow).isoformat()

        with sqlite3.connect(r"") as conn2:
            cursor1 = conn2.cursor()
            cursor1.execute("""
                INSERT INTO ids (user_id, username, created_at)
                VALUES (?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET username=excluded.username
            """, (user_id, username, created_at))
            conn2.commit()

        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –ø–æ –ú–°–ö, '
                                          '—Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '
                                          '¬´üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç¬ª –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Ñ–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '
                                          '¬´üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∞–∫—Ç¬ª\n\n/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')

        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        fact_button = types.KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç')
        suggest_button = types.KeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∞–∫—Ç')
        keyboard.add(fact_button, suggest_button)

        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç!', reply_markup=keyboard)

    except telebot.apihelper.ApiException as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")


# –∫–æ–º–∞–Ω–¥–∞ help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ –±–∞–≥–∏ —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ!\n\n–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º - '
                          '@Su1rit9er\n\n–§–∞–∫—Ç—ã –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è.')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.chat.id
    username = message.from_user.username
    moscow = pytz.timezone('Europe/Moscow')
    if user_states.get(user_id) == AWAITING_FACT:
        fact_text = message.text.strip()
        if fact_text:
            created_at = dt.datetime.now(moscow).isoformat()

            with sqlite3.connect(r"") as conn3:
                cursor3 = conn3.cursor()
                cursor3.execute("""
                    INSERT INTO suggested_facts (username, fact, created_at)
                    VALUES (?, ?, ?)
                """, (username, fact_text, created_at))
                conn3.commit()

            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–µ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞.")

        user_states.pop(user_id, None)
        return

    if message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç':
        bot.send_message(user_id, random.choice(facts)[0])

    elif message.text == 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∞–∫—Ç':
        user_states[user_id] = AWAITING_FACT
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ‚úçÔ∏è")


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏

def send_fact():
    try:
        with sqlite3.connect(r"") as conn2:
            cursor2 = conn2.cursor()
            cursor2.execute("SELECT user_id FROM ids")
            user_ids = [row[0] for row in cursor2.fetchall()]

        fact = random.choice(facts)[0]
        for user_id in user_ids:
            try:
                bot.send_message(user_id, fact)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_fact: {e}")


# —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
last_sent_date = None


def scheduler():
    global last_sent_date
    moscow = pytz.timezone('Europe/Moscow')
    while True:
        now = dt.datetime.now(moscow)
        if now.strftime("%H:%M") == "20:00" and (last_sent_date != now.date()):
            send_fact()
            last_sent_date = now.date()
            logger.info("–§–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        time.sleep(30)


def send_one_time_message():
    try:
        with sqlite3.connect(r"") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM ids")
            user_ids = [row[0] for row in cursor.fetchall()]

        for user_id in user_ids:
            try:
                bot.send_message(
                    user_id,
                    "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π —Ñ–∞–∫—Ç."
                )
                time.sleep(0.1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        logger.info("–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")


# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

threading.Thread(target=scheduler, daemon=True).start()

# send_one_time_message()

bot.polling(none_stop=True)